package urender.demo.perf;

public class PerfMonitorWindow extends javax.swing.JFrame implements IPerfMonitor {

	/**
	 * Creates new form PerfMonitorWindow
	 */
	public PerfMonitorWindow() {
		initComponents();
	}

	private long lastTimestamp = 0;
	private long[] frametimes = new long[60];
	private int frametimesIdx = 0;
	private boolean avgStartReached = false;

	@Override
	public void newFrame() {
		long timestamp = System.currentTimeMillis();

		int fps;
		if (lastTimestamp == 0) {
			fps = 0;
		} else {
			long diff = timestamp - lastTimestamp;
			frametimesIdx++;
			if (frametimesIdx == frametimes.length) {
				frametimesIdx = 0;
				avgStartReached = true;
			}
			frametimes[frametimesIdx] = diff;

			if (avgStartReached) {
				long sum = 0;
				for (int i = 0; i < frametimes.length; i++) {
					sum += frametimes[i];
				}

				fps = (int) (1000 / (sum / frametimes.length));
				fpsGraph.update(fps);
				framerateText.setText(fps + " FPS");
			}
		}
		lastTimestamp = timestamp;
	}

	@Override
	public void setDisplayLoopTime(long timeNs) {
		int val = (int) (timeNs / 1000);
		displayLoopTimeGraph.update(val);
		displayLoopTimeText.setText(String.valueOf(val));
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
	 * code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fpsGraph = new urender.demo.perf.PerfMonitorGraphSurface();
        separator = new javax.swing.JSeparator();
        framerateLabel = new javax.swing.JLabel();
        framerateText = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        displayLoopTimeText = new javax.swing.JLabel();
        displayLoopTimeGraph = new urender.demo.perf.PerfMonitorGraphSurface();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Performance monitor");

        fpsGraph.setGraphColor(java.awt.Color.blue);
        fpsGraph.setGraphName("FPS");

        javax.swing.GroupLayout fpsGraphLayout = new javax.swing.GroupLayout(fpsGraph);
        fpsGraph.setLayout(fpsGraphLayout);
        fpsGraphLayout.setHorizontalGroup(
            fpsGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );
        fpsGraphLayout.setVerticalGroup(
            fpsGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 170, Short.MAX_VALUE)
        );

        framerateLabel.setText("Framerate:");

        framerateText.setText("-");

        jLabel1.setText("CPU frametime:");

        displayLoopTimeText.setText("-");

        displayLoopTimeGraph.setGraphColor(new java.awt.Color(0, 204, 204));
        displayLoopTimeGraph.setGraphName("Draw loop time");

        javax.swing.GroupLayout displayLoopTimeGraphLayout = new javax.swing.GroupLayout(displayLoopTimeGraph);
        displayLoopTimeGraph.setLayout(displayLoopTimeGraphLayout);
        displayLoopTimeGraphLayout.setHorizontalGroup(
            displayLoopTimeGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        displayLoopTimeGraphLayout.setVerticalGroup(
            displayLoopTimeGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 170, Short.MAX_VALUE)
        );

        jLabel2.setText("FPS");

        jLabel3.setText("Î¼s");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fpsGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(separator)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(framerateLabel)
                            .addComponent(jLabel1))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(displayLoopTimeText, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                            .addComponent(framerateText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(displayLoopTimeGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(framerateLabel)
                    .addComponent(framerateText)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(displayLoopTimeText)
                    .addComponent(jLabel3))
                .addGap(45, 45, 45)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fpsGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayLoopTimeGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private urender.demo.perf.PerfMonitorGraphSurface displayLoopTimeGraph;
    private javax.swing.JLabel displayLoopTimeText;
    private urender.demo.perf.PerfMonitorGraphSurface fpsGraph;
    private javax.swing.JLabel framerateLabel;
    private javax.swing.JLabel framerateText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator separator;
    // End of variables declaration//GEN-END:variables
}
